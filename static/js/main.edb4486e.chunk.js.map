{"version":3,"sources":["App.module.scss","1inputData/Input.tsx","1inputData/Validator.ts","bll/appReduser.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","1inputData/input.module.scss"],"names":["module","exports","Input","props","useState","value","setValue","error","setError","alertFc","addInputValue","name","alert","Number","onValidate","validate","className","cl","wrapp","type","onChange","e","currentTarget","placeholder","onBlur","errorInput","input","onKeyPress","key","textError","min","max","isFinite","length","minLength","maxLength","nowDate","Date","yearNow","getFullYear","toString","slice","monthCard","yearCard","initialState","inputs","inputValue","App","dispatch","useDispatch","useCallback","changeInputAC","resolveValue","useSelector","state","app","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","i","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edb4486e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2hwyg\"};","import React, {ChangeEvent, useState} from \"react\";\r\nimport cl from './input.module.scss';\r\n\r\ntype inputType = {\r\n    addInputValue: (value: string, name: string) => void\r\n    type: any\r\n    name: any\r\n    placeholder: string\r\n    validate: (value: string, min: number, max: number, name: string) => string\r\n}\r\nexport const Input = (props: inputType) => {\r\n    let [value, setValue] = useState<any>('');\r\n    let [error, setError] = useState<string>('')\r\n    const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    const alertFc = (value: string) => {\r\n        debugger\r\n        props.addInputValue(value, props.name)\r\n        alert(`${Number(value)} ok, let's go further`)\r\n    }\r\n    const onValidate = () => {\r\n        if (props.name === 'numberCart') {\r\n            const error = props.validate(value, 8, 8, 'numberCart')\r\n            error ? setError(error) : alertFc(value)\r\n        }\r\n        if (props.name === 'date') {\r\n            const error = props.validate(value, 4, 4, 'date')\r\n            error ? setError(error) : alertFc(value)\r\n        }\r\n        if (props.name === 'CVV2') {\r\n            const error = props.validate(value, 3, 3, 'CVV2')\r\n            error ? setError(error) : alertFc(value)\r\n        }\r\n    }\r\n    const handleBlur = () => {\r\n        onValidate()\r\n    }\r\n    const onKeyPressCallback = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onValidate()\r\n        }\r\n    }\r\n    return (\r\n        <div className={cl.wrapp}>\r\n            <input type={props.type} value={value} onChange={onChangeValue}\r\n                   name={props.name} placeholder={props.placeholder}\r\n                   onBlur={handleBlur} className={!error ? cl.input : cl.errorInput}\r\n                   onKeyPress={onKeyPressCallback}\r\n            />\r\n            {error && <span className={cl.textError}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n","export const maxLength = (max: number, value: string) => {\r\n    return value && value.length > max\r\n}\r\nexport const minLength = (min: number, value: string) => {\r\n    return value.length < min\r\n}\r\n\r\n\r\nexport const isNumber = (value: string) => {\r\n    // return Number(value) !== 'n'\r\n}\r\n\r\nexport const validate = (value: any, min: number, max: number, name: string ) => {\r\n    if (!value) {\r\n        return 'Required'\r\n    }\r\n\r\n    if (!isFinite(value)) {\r\n         return 'ok, try to enter the number'\r\n    }\r\n\r\n    if (minLength(min, value)) {\r\n        return `Must be ${min} characters or more`\r\n    }\r\n\r\n    if(maxLength(max, value)){\r\n        return `Must be ${max} characters or less`\r\n    }\r\n\r\n    if(name === 'date') {\r\n        let nowDate = new Date();\r\n        let yearNow = Number((nowDate.getFullYear()).toString().slice(0, 2));\r\n        const monthCard = Number(value.slice(0, 2))\r\n        const yearCard = Number(value.slice(2, 4))\r\n        if(monthCard>12){return 'month can be !>12'}\r\n        if (monthCard <= 12 && yearCard >= yearNow) {\r\n            return ''\r\n        } else {\r\n            return 'maybe your card is expired'\r\n        }\r\n    }\r\n    return ''\r\n}\r\n","type changeInputACType = ReturnType<typeof changeInputAC>\r\nexport type inputType = {\r\n    inputValue: string\r\n    key: string\r\n}\r\nexport type initialStateType = {\r\n    inputs: Array<inputType>\r\n}\r\ntype actionType = changeInputACType;\r\nlet initialState: initialStateType = {\r\n    inputs:\r\n        [{inputValue: '', key: 'numberCart'},\r\n            {inputValue: '', key: 'date'},\r\n            {inputValue: '', key: 'CVV2'},\r\n        ]\r\n}\r\nexport const AppReduser = (state = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"CHANHE-INPUT-VALUE\": {\r\n\r\n            return {\r\n                ...state, inputs: state.inputs.map (i => {\r\n                    if (i.key !== action.key) {\r\n                        return i\r\n                    } else  {return  {...i, inputValue: action.inputValue} }\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const changeInputAC = (inputValue: string, key: string) => ({type: 'CHANHE-INPUT-VALUE', inputValue, key} as const)","import React, {useCallback} from 'react';\nimport cl from './App.module.scss';\nimport {Input} from \"./1inputData/Input\";\nimport {validate} from \"./1inputData/Validator\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeInputAC, initialStateType} from \"./bll/appReduser\";\nimport {AppRootStateType} from \"./bll/store\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const addInputValue = useCallback((inputValue: string, name: string) => {\n        dispatch(changeInputAC(inputValue, name))\n    }, [dispatch]);\n    let resolveValue = useSelector<AppRootStateType, initialStateType>(state => state.app)\n    return (\n        <div className={cl.App}>\n            <Input type={'string'} placeholder={'Номер Карты'} name={'numberCart'} validate={validate} addInputValue={addInputValue}/>\n            <Input type={'string'} placeholder={'Действительна До'} name={'date'} validate={validate} addInputValue={addInputValue}/>\n            <Input type={'string'} placeholder={'CVV2'} name={'CVV2'} validate={validate}\n                   addInputValue={addInputValue}/>\n            {resolveValue.inputs.map(input => <div key={input.key}>{input.key}:{input.inputValue}</div>)}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {AppReduser} from \"./appReduser\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: AppReduser\r\n})\r\nexport const store = createStore(rootReducer)\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// window.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapp\":\"input_wrapp__2BED_\",\"input\":\"input_input__3HgGW\",\"errorInput\":\"input_errorInput__2B0eB\",\"textError\":\"input_textError__1b6b4\"};"],"sourceRoot":""}